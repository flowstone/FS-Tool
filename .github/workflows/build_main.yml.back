name: Mac/Win Package

on:
  workflow_dispatch:
    inputs:
      #java_version:
      #  description: "The version of Java to use for jpackage"
      #  required: true
      app_version:
        description: "应用版本，如1.0.1"
        required: true
      release_notes:
        description: "Release描述"
        required: false
  #push:
  #  tags:
  #    - 'v*.*.*'  # 这个通配符表示匹配任何推送的tag，你也可以指定具体格式的tag，比如 'v*.*.*' 表示以v开头的语义化版本号格式的tag
jobs:
  mac_release:
    runs-on: macos-13 # macos13支持Intel平台，14之后默认是ARM平台，Intel平台要收费

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 检出当前仓库代码

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
           python-version: '3.11'  # 根据项目实际依赖的Python版本进行调整


      - name: Use site-packages variable
        run: |
          echo "The site-packages path is: ${{ env.Python_ROOT_DIR }}"
          
      - name: Install dependencies
        run: pip install -r requirements.txt  # 安装项目依赖的Python库

      - name: Install PyInstaller
        run: pip install pyinstaller  # 安装PyInstaller打包工具

          
      - name: Build application with PyInstaller
        run: pyinstaller --name "FS-Tool" --onefile --windowed --add-data "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/PyQt5/Qt5/lib:./PyQt5/Qt/lib" --add-data "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/PyQt5/Qt5/plugins:./PyQt5/Qt/plugins"   --add-data "resources:resources" --collect-all PyQt5 --icon=resources/app.ico app.py
        #working-directory: ${{ github.repository }}  # 设置工作目录为仓库根目录

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub自动生成的token用于创建发布
        with:
          #tag_name: ${{ github.ref }}
          #name: Release ${{ github.ref }}
          tag_name: v${{ inputs.app_version }}
          name: Release v${{ inputs.app_version }}
          draft: false  # 是否为草稿，设为false表示直接发布
          prerelease: false  # 是否为预发布版本，设为false表示正式发布

      - name: Upload App to Release
        uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          #tag_name: ${{ github.ref }}
          #name: Release ${{ github.ref }}
          tag_name: v${{ inputs.app_version }}
          name: Release v${{ inputs.app_version }}
          draft: false
          prerelease: false
          files: |
              /dest/FS-Tool.app
  win_release:
    runs-on: windows-latest
    needs: mac_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 检出当前仓库代码

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
           python-version: '3.x'  # 根据项目实际依赖的Python版本进行调整


      - name: Use site-packages variable
        run: |
          echo "The site-packages path is: ${{ env.Python_ROOT_DIR }}"

      - name: Install dependencies
        run: pip install -r requirements.txt  # 安装项目依赖的Python库

      - name: Install PyInstaller
        run: pip install pyinstaller  # 安装PyInstaller打包工具

      - name: Build application with PyInstaller
        run: pyinstaller --name "FS-Tool" --onefile --window --add-data "${{ env.Python_ROOT_DIR }}\lib\site-packages\PyQt5\Qt5\bin;./PyQt5/Qt/bin" --add-data "${{ env.Python_ROOT_DIR }}\lib\site-packages\PyQt5\Qt5\plugins;./PyQt5/Qt/plugins" --add-data "resources;resources" --collect-all PyQt5 --icon=resources/app.ico app.py
        #working-directory: ${{ github.repository }}  # 设置工作目录为仓库根目录

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub自动生成的token用于创建发布
        with:
          #tag_name: ${{ github.ref }}
          #name: Release ${{ github.ref }}
          tag_name: v${{ inputs.app_version }}
          name: Release v${{ inputs.app_version }}
          draft: false  # 是否为草稿，设为false表示直接发布
          prerelease: false  # 是否为预发布版本，设为false表示正式发布

      - name: Upload App to Release
        uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          #tag_name: ${{ github.ref }}
          #name: Release ${{ github.ref }}
          tag_name: v${{ inputs.app_version }}
          name: Release v${{ inputs.app_version }}
          draft: false
          prerelease: false
          files: |
              /dest/FS-Tool.exe
