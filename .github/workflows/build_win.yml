name: PyInstaller Package and Release

on:
  push:
    tags:
      - v*  # 仅在推送以v开头的标签时触发工作流，方便进行版本管理，可按实际需求调整

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 检出当前仓库代码

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # 根据项目实际依赖的Python版本进行调整

      - name: Install dependencies
        run: pip install -r requirements.txt  # 安装项目依赖的Python库

      - name: Install PyInstaller
        run: pip install pyinstaller  # 安装PyInstaller打包工具

      - name: Build application with PyInstaller
        run: pyinstaller --name "流体石头的工具箱" --onefile --window --add-data "${{ env.pythonSitePackages }}\PyQt5\Qt5\bin;./PyQt5/Qt/bin" --add-data "${{ env.pythonSitePackages }}\PyQt5\Qt5\plugins;./PyQt5/Qt/plugins" --add-data "resources;resources" --collect-all PyQt5 --icon=resources/app.ico .\app.py
        working-directory: ${{ github.repository }}  # 设置工作目录为仓库根目录

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub自动生成的token用于创建发布
        with:
          tag_name: ${{ github.ref }}  # 使用推送的标签作为发布版本号
          release_name: Release ${{ github.ref }}  # 发布名称，可按需调整
          draft: false  # 是否为草稿，设为false表示直接发布
          prerelease: false  # 是否为预发布版本，设为false表示正式发布

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 获取创建发布时的上传链接
          asset_path: dist/流体石头的工具箱.exe  # 要上传的打包后的可执行文件路径，根据实际打包情况调整
          asset_name: 流体石头的工具箱.exe  # 上传文件的名称，可按需调整
          asset_content_type: application/octet-stream  # 文件类型，.exe文件一般用此类型
